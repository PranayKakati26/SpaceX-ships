{"version":3,"sources":["utils/extract-files.js","utils/request.js","utils/GqlClient.js","components/Card.js","App.js","index.js"],"names":["isObject","value","extractFiles","tree","treePath","arguments","length","undefined","files","recurse","node","nodePath","Object","keys","forEach","key","path","concat","File","Blob","push","file","FileList","Array","prototype","slice","call","client","GqlClient","_ref","url","errorHandler","classCallCheck","this","_callee","query","variables","options","headers","others","fetchOptions","graphqlQuery","body","response","result","_args","regenerator_default","a","wrap","_context","prev","next","objectWithoutProperties","_excluded","JSON","stringify","print","FormData","append","_ref2","objectSpread2","method","Content-Type","fetch","sent","json","errors","abrupt","t0","status","stop","error","console","log","requestToGraphql","asyncToGenerator","mark","_x","_x2","apply","Card","props","react_default","createElement","react","className","src","shipImage","shipName","shipPort","App","_useState","useState","_useState2","slicedToArray","shipData","setShipData","_useState3","_useState4","setShipName","_useState5","_useState6","isSubmitted","setIsSubmitted","_useState7","_useState8","checkAll","setCheckAll","inputRef","useRef","fetchShips","request","gql","_templateObject","taggedTemplateLiteral","data","ships","useEffect","shipNameArray","i","name","SearchRenderedList","values","filter","state","map","ship","src_components_Card","image","home_port","renderedList","finalRender","includes","onSubmit","event","preventDefault","current","form_control","input","type","placeholder","fontSize","ref","esm_button","width","variant","onClick","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"8TAAMA,EAAW,SAAAC,GAAK,MAAqB,kBAAVA,GAAgC,OAAVA,GA+BxCC,EA7BM,SAACC,GAAwB,IAAlBC,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC/BG,EAAQ,GAyBd,OAHIR,EAASG,IApBG,SAAVM,EAAWC,EAAMC,GACrBC,OAAOC,KAAKH,GAAMI,QAAQ,SAAAC,GACxB,GAAKf,EAASU,EAAKK,IAAnB,CACA,IAAMC,EAAI,GAAAC,OAAMN,GAANM,OAAiBF,GAC3B,GACmB,qBAATG,MAAwBR,EAAKK,aAAgBG,MACpC,qBAATC,MAAwBT,EAAKK,aAAgBI,KAIrD,OAFAX,EAAMY,KAAK,CAAEJ,OAAMK,KAAMX,EAAKK,UAC9BL,EAAKK,GAAO,MAIU,qBAAbO,UAA4BZ,EAAKK,aAAgBO,WAC1DZ,EAAKK,GAAOQ,MAAMC,UAAUC,MAAMC,KAAKhB,EAAKK,KAE9CN,EAAQC,EAAKK,GAAN,GAAAE,OAAeD,EAAf,SAKTP,CAAQN,EAAmB,KAAbC,EAAkBA,EAAlB,GAAAa,OAAgCb,EAAhC,MAETI,iBCtBHmB,EAAS,eCFb,SAAAC,EAAAC,GAAmC,IAArBC,EAAqBD,EAArBC,IAAKC,EAAgBF,EAAhBE,aAAgBnB,OAAAoB,EAAA,EAAApB,CAAAqB,KAAAL,GACjCK,KAAKH,IAAMA,EACXG,KAAKF,aAAeA,iFAGtB,SAAAG,EAAYC,EAAOC,GAAnB,IAAAC,EAAAC,EAAAC,EAAA/B,EAAAgC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxC,UAAA,OAAAyC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAA8Bd,EAA9BQ,EAAAvC,OAAA,QAAAC,IAAAsC,EAAA,GAAAA,EAAA,GAAwC,GAC9BP,EAAuBD,EAAvBC,QAAYC,EADtB3B,OAAAwC,EAAA,EAAAxC,CACiCyB,EADjCgB,GAIQ7C,EAAQN,EAAakC,GAMrBK,EAAea,KAAKC,UAAU,CAClCpB,MAAOqB,YAAMrB,GACbC,cAaE5B,EAAMF,SAEFoC,EAAO,IAAIe,UAEZC,OAAO,aAAcjB,GAE1BjC,EAAMM,QAAQ,SAAA6C,GAAA,IAAG3C,EAAH2C,EAAG3C,KAAMK,EAATsC,EAAStC,KAAT,OAAoBqB,EAAKgB,OAAO1C,EAAMK,KAEpDmB,EAAY5B,OAAAgD,EAAA,EAAAhD,CAAA,CACViD,OAAQ,OACRnB,QACGL,IAMLG,EAAY5B,OAAAgD,EAAA,EAAAhD,CAAA,CACViD,OAAQ,OACRvB,QAAQ1B,OAAAgD,EAAA,EAAAhD,CAAA,CAAGkD,eAAgB,oBAAuBxB,GAClDI,KAAMD,GACHF,GA9CTU,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAmD2BY,MAAM9B,KAAKH,IAAKU,GAnD3C,cAmDUG,EAnDVM,EAAAe,KAAAf,EAAAE,KAAA,GAoDyBR,EAASsB,OApDlC,aAoDUrB,EApDVK,EAAAe,MAsDeE,OAtDf,CAAAjB,EAAAE,KAAA,eAwDYP,EAxDZ,eAAAK,EAAAkB,OAAA,SA2DWvB,GA3DX,cAAAK,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,SA+DUrC,OAAOA,OAAAgD,EAAA,EAAAhD,CAAA,CACXyD,OAAQpC,KAAKF,aAALkB,EAAAmB,KADEnB,EAAAmB,KA/DhB,yBAAAnB,EAAAqB,SAAApC,EAAAD,KAAA,6EDHa,CAAc,CAC3BH,IAAK,kCACLC,aANkC,SAAAwC,GAClCC,QAAQC,IAAIF,MAWCG,EAJO,eAAA7C,EAAAjB,OAAA+D,EAAA,EAAA/D,CAAAkC,EAAAC,EAAA6B,KAAG,SAAA1C,EAAOC,EAAOC,GAAd,OAAAU,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAkB,OAAA,SAChBxC,EAAOQ,MAAMA,EAAOC,IADJ,wBAAAa,EAAAqB,SAAApC,MAAH,gBAAA2C,EAAAC,GAAA,OAAAjD,EAAAkD,MAAA9C,KAAA5B,YAAA,GEuBP2E,SA9BF,SAACC,GAId,OACIC,EAAAnC,EAAAoC,cAACC,EAAA,SAAD,KACJF,EAAAnC,EAAAoC,cAAA,OAAKE,UAAU,WACXH,EAAAnC,EAAAoC,cAAA,WAASE,UAAU,WAEbH,EAAAnC,EAAAoC,cAAA,OAAKE,UAAU,eAAeC,IAAKL,EAAMM,YACzCL,EAAAnC,EAAAoC,cAAA,OAAKE,UAAU,iBACbH,EAAAnC,EAAAoC,cAAA,MAAIE,UAAU,iBAAgBH,EAAAnC,EAAAoC,cAAA,QAAME,UAAU,YAAhB,eAA9B,QAEAH,EAAAnC,EAAAoC,cAAA,QAAME,UAAU,iBAAhB,IAAkCJ,EAAMO,SAAxC,MAGAN,EAAAnC,EAAAoC,cAAA,MAAIE,UAAU,iBAAgBH,EAAAnC,EAAAoC,cAAA,QAAME,UAAU,YAAhB,cAA9B,QACAH,EAAAnC,EAAAoC,cAAA,QAAME,UAAU,iBAAhB,IACMJ,EAAMQ,SADZ,qCCHG,SAASC,IACtB,IAAAC,EAAgCC,mBAAS,IAAzCC,EAAAjF,OAAAkF,EAAA,EAAAlF,CAAA+E,EAAA,GAAOI,EAAPF,EAAA,GAAiBG,EAAjBH,EAAA,GACAI,EAAgCL,mBAAS,IAAzCM,EAAAtF,OAAAkF,EAAA,EAAAlF,CAAAqF,EAAA,GAAOT,EAAPU,EAAA,GAAiBC,EAAjBD,EAAA,GACAE,EAAsCR,oBAAS,GAA/CS,EAAAzF,OAAAkF,EAAA,EAAAlF,CAAAwF,EAAA,GAAOE,EAAPD,EAAA,GAAoBE,EAApBF,EAAA,GACAG,EAAiCZ,oBAAS,GAA1Ca,EAAA7F,OAAAkF,EAAA,EAAAlF,CAAA4F,EAAA,GAAOE,EAAPD,EAAA,GAAkBE,EAAlBF,EAAA,GAEMG,EAAWC,mBAEXC,EAAU,eAAAjF,EAAAjB,OAAA+D,EAAA,EAAA/D,CAAAkC,EAAAC,EAAA6B,KAAG,SAAA1C,IAAA,IAAAS,EAAA,OAAAG,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACM4D,EAAQC,IAADC,MAAArG,OAAAsG,EAAA,EAAAtG,CAAA,mHADb,OACX+B,EADWM,EAAAe,KAUjBQ,QAAQC,IAAI9B,EAASwE,KAAKC,OAC1BpB,EAAYrD,EAASwE,KAAKC,OAXT,wBAAAnE,EAAAqB,SAAApC,MAAH,yBAAAL,EAAAkD,MAAA9C,KAAA5B,YAAA,GAchBgH,oBAAU,WACRP,KACC,IAEH,IAMIQ,EAAgB,GACpB,IAAK,IAAIC,KAAKxB,EAEZuB,EAAclG,KAAK2E,EAASwB,GAAGC,MAYnC,IAMQC,EAAqB7G,OAAO8G,OAAO3B,GACtC4B,OAAO,SAACC,GACP,OAAOA,EAAMJ,MAAQhC,IAEtBqC,IAAI,SAACC,GAAD,OACH5C,EAAAnC,EAAAoC,cAAC4C,EAAD,CACExC,UAAWuC,EAAKE,MAChBxC,SAAUsC,EAAKN,KACf/B,SAAUqC,EAAKG,cAIfC,EAAetH,OAAO8G,OAAO3B,GAAU8B,IAAI,SAACC,GAAD,OAC/C5C,EAAAnC,EAAAoC,cAAC4C,EAAD,CACExC,UAAWuC,EAAKE,MAChBxC,SAAUsC,EAAKN,KACf/B,SAAUqC,EAAKG,cAKbE,EAAc7B,EAAegB,EAAcc,SAAS5C,GAAYiC,EAAqBvC,EAAAnC,EAAAoC,cAAA,kCAAiCuB,GAAYwB,EACxI,OACEhD,EAAAnC,EAAAoC,cAAA,OAAKE,UAAU,OACbH,EAAAnC,EAAAoC,cAAA,OAAKE,UAAU,UACbH,EAAAnC,EAAAoC,cAAA,oBAEAD,EAAAnC,EAAAoC,cAAA,QAAMkD,SAtDU,SAACC,GACrBA,EAAMC,iBACNpC,EAAYS,EAAS4B,QAAQvI,OAC7BsG,GAAe,KAoDTrB,EAAAnC,EAAAoC,cAACsD,EAAA,EAAD,KACEvD,EAAAnC,EAAAoC,cAACuD,EAAA,EAAD,CACEC,KAAK,OACLnB,KAAK,WACLoB,YAAY,oBACZC,SAAS,OACTxD,UAAU,YACVyD,IAAKlC,KAIT1B,EAAAnC,EAAAoC,cAAC4D,EAAA,EAAD,CACEC,MAAM,OACN3D,UAAU,qBACV4D,QAAQ,QACRN,KAAK,UAJP,UASAzD,EAAAnC,EAAAoC,cAAC4D,EAAA,EAAD,CACEC,MAAM,OACN3D,UAAU,qBACV4D,QAAQ,QACRC,QA1DY,WACtBvC,GAAY,GACZJ,GAAe,KAoDP,qBAWH4B,GC5HP,IAAMgB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPrE,EAAAnC,EAAAoC,cAACD,EAAAnC,EAAMyG,WAAP,KACEtE,EAAAnC,EAAAoC,cAACO,EAAD,OAEFyD","file":"static/js/main.8f397deb.chunk.js","sourcesContent":["const isObject = value => typeof value === \"object\" && value !== null;\n\nconst extractFiles = (tree, treePath = \"\") => {\n  const files = [];\n\n  const recurse = (node, nodePath) => {\n    Object.keys(node).forEach(key => {\n      if (!isObject(node[key])) return;\n      const path = `${nodePath}${key}`;\n      if (\n        (typeof File !== \"undefined\" && node[key] instanceof File) ||\n        (typeof Blob !== \"undefined\" && node[key] instanceof Blob)\n      ) {\n        files.push({ path, file: node[key] });\n        node[key] = null; // eslint-disable-line no-param-reassign\n        return;\n      }\n\n      if (typeof FileList !== \"undefined\" && node[key] instanceof FileList) {\n        node[key] = Array.prototype.slice.call(node[key]); // eslint-disable-line no-param-reassign\n      }\n      recurse(node[key], `${path}.`);\n    });\n  };\n\n  if (isObject(tree)) {\n    recurse(tree, treePath === \"\" ? treePath : `${treePath}.`);\n  }\n  return files;\n};\n\nexport default extractFiles;\n","import GqlClient from \"./GqlClient\";\n\nconst handleGraphqlResponseErrors = error => {\n  console.log(error);\n};\n\nconst client = new GqlClient({\n  url: \"https://api.spacex.land/graphql\",\n  errorHandler: handleGraphqlResponseErrors\n});\nconst requestToGraphql = async (query, variables) => {\n  return client.query(query, variables);\n};\n\nexport default requestToGraphql;\n","import { print } from \"graphql/language/printer\";\nimport extractFiles from \"./extract-files\";\n\nexport default class GqlClient {\n  constructor({ url, errorHandler }) {\n    this.url = url;\n    this.errorHandler = errorHandler;\n  }\n\n  async query(query, variables, options = {}) {\n    const { headers, ...others } = options;\n    // Extracts all files from variables and replaces them\n    // with null\n    const files = extractFiles(variables);\n    let fetchOptions;\n\n    // uncomment below to debug query\n\n    // Creates a stringfied query\n    const graphqlQuery = JSON.stringify({\n      query: print(query), // \"print\" changes graphql AST into normal string\n      variables\n    });\n\n    // Uncomment to the debugðŸ‘‡\n\n    // (headers, JSON.stringify(variables, null, 2))\n    // console.log(\n    //   print(query),\n    //   JSON.stringify(variables)\n    // )\n\n    // Checks if there are any files in the query\n    // if there is then ...\n    if (files.length) {\n      // ...then creates a form object\n      const body = new FormData();\n      // appends query into body\n      body.append(\"operations\", graphqlQuery);\n      // apppend files into body\n      files.forEach(({ path, file }) => body.append(path, file));\n      // sets fetchOptions\n      fetchOptions = {\n        method: \"POST\",\n        body,\n        ...options\n      };\n    } else {\n      // sets fetchOption without any body append\n      // because there are no files here and we\n      // directly assign body to graphqlQuery\n      fetchOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\", ...headers },\n        body: graphqlQuery,\n        ...others\n      };\n    }\n    try {\n      // fetches the Data\n      const response = await fetch(this.url, fetchOptions);\n      const result = await response.json();\n      // Checks if there are any error in result\n      if (result.errors) {\n        // throw the result\n        throw result;\n      }\n      // otherwise just normally return them\n      return result;\n    } catch (e) {\n      // For other normal errors\n      // just throw them\n      throw Object({\n        status: this.errorHandler(e),\n        ...e\n      });\n    }\n  }\n}\n","import React from 'react';\r\nimport { Fragment } from \"react\";\r\nimport \"./Card.css\";\r\nconst Card = (props) => {\r\n\r\n    // console.log(props.shipImage.name);\r\n   \r\nreturn (\r\n    <Fragment>\r\n<div className=\"wrapper\">\r\n    <article className=\"country\">\r\n        \r\n          <img className=\"country__img\" src={props.shipImage}/>\r\n          <div className=\"country__data\">\r\n            <h3 className=\"country__name\"><span className=\"shipName\">Ship name :</span> &nbsp;\r\n\r\n            <span className=\"shipNameValue\">\"{props.shipName}\"</span>\r\n            </h3>\r\n           \r\n            <h4 className=\"country__port\"><span className=\"portName\">Port Name:</span> &nbsp;\r\n            <span className=\"portNameValue\">\r\n                \"{props.shipPort}\"\"\r\n            </span></h4>\r\n            \r\n           \r\n          </div>\r\n         \r\n        </article>\r\n        </div>\r\n    </Fragment>\r\n)\r\n}\r\n\r\nexport default Card;","import React, { useEffect, useRef } from \"react\";\nimport \"./styles.css\";\nimport gql from \"graphql-tag\";\nimport request from \"./utils/request\";\nimport Card from \"./components/Card\";\nimport { useState } from \"react\";\nimport \"./components/Card.css\";\nimport {\n  Formik,\n  Form,\n  Field,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Button,\n} from \"@chakra-ui/react\";\nexport default function App() {\n  const [shipData, setShipData] = useState(\"\");\n  const [shipName, setShipName] = useState(\"\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [checkAll , setCheckAll] = useState(true);\n  \n  const inputRef = useRef();\n\n  const fetchShips = async () => {\n    const response = await request(gql`\n      {\n        ships {\n          name\n          home_port\n          image\n        }\n      }\n    `);\n    console.log(response.data.ships);\n    setShipData(response.data.ships);\n  };\n\n  useEffect(() => {\n    fetchShips();\n  }, []);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    setShipName(inputRef.current.value);\n    setIsSubmitted(true);\n  };\n\n  let shipNameArray = [];\n  for (let i in shipData) {\n    \n    shipNameArray.push(shipData[i].name)\n  }\n\n\n// if(shipNameArray.includes(shipName)){\n//   console.log('success');\n//   setMatched(true);\n// } else {\n//   console.log('failure');\n \n// }\n\nconst checkAllHandler = () => {\n  setCheckAll(true);\n  setIsSubmitted(false);\n}\n\n\n  const SearchRenderedList = Object.values(shipData)\n    .filter((state) => {\n      return state.name == shipName;\n    })\n    .map((ship) => (\n      <Card\n        shipImage={ship.image}\n        shipName={ship.name}\n        shipPort={ship.home_port}\n      />\n    ));\n\n  const renderedList = Object.values(shipData).map((ship) => (\n    <Card\n      shipImage={ship.image}\n      shipName={ship.name}\n      shipPort={ship.home_port}\n    />\n  ));\n\n\n  const finalRender = isSubmitted ? (shipNameArray.includes(shipName) ? SearchRenderedList : <p>Sorry, No Match Found</p>) : (checkAll && renderedList);\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>SpaceX</h1>\n\n        <form onSubmit={submitHandler}>\n          <FormControl>\n            <Input\n              type=\"text\"\n              name=\"shipname\"\n              placeholder=\"Enter a Ship name\"\n              fontSize=\"25px\"\n              className=\"nameInput\"\n              ref={inputRef}\n\n            ></Input>\n          </FormControl>\n          <Button\n            width=\"full\"\n            className=\"form__submit__btn1\"\n            variant=\"solid\"\n            type=\"submit\"\n          >\n            Search\n          </Button>\n\n          <Button\n            width=\"full\"\n            className=\"form__submit__btn1\"\n            variant=\"solid\"\n            onClick={checkAllHandler}\n            >\n            Check All Ships\n          </Button>\n        </form>\n      </div>\n      {/* {isSubmitted ? SearchRenderedList : renderedList} */}\n      {finalRender}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}